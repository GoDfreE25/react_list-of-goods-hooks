{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","map","good","name","id","uuidv4","App","useState","isShowedGoods","setShowedGoods","isReversed","setReversed","isSortBy","setSortBy","copyGoods","sort","good1","good2","localeCompare","length","reverse","className","type","onClick","revers","ReactDOM","render","document","getElementById"],"mappings":"yOASMA,EAA0B,CAC9B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACAC,KAAI,SAAAC,GAAI,MAAK,CACbC,KAAMD,EACNE,GAAIC,kBAyFSC,EAtFC,WACd,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAiBC,EAAjB,KAeMC,EAAS,YAAOd,GAiBtB,OAfAc,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQL,GACN,IAAK,WACH,OAAOI,EAAMb,KAAKe,cAAcD,EAAMd,MACxC,IAAK,SACH,OAAOa,EAAMb,KAAKgB,OAASF,EAAMd,KAAKgB,OACxC,QACE,OAAO,MAITT,GACFI,EAAUM,UAIV,sBAAKC,UAAU,MAAf,UACE,qDAGCb,EACC,oBAAIa,UAAU,QAAd,SACIP,EAAUb,KAAI,SAAAC,GAAI,OAClB,oBAAImB,UAAU,aAAd,SACGnB,EAAKC,MADwBD,EAAKE,SAOvC,wBACEkB,KAAK,SACLC,QA/CW,kBAAMd,GAAe,IA6ClC,mBAOJ,wBACEa,KAAK,SACLC,QApDe,kBAAMZ,GAAY,SAAAa,GAAM,OAAKA,MAkD9C,qBAMA,wBACEF,KAAK,SACLC,QAxDiB,kBAAMV,EAAU,aAsDnC,iCAMA,wBACES,KAAK,SACLC,QA5De,kBAAMV,EAAU,WA0DjC,4BAMA,wBACES,KAAK,SACLC,QAhEgB,WACpBV,EAAU,IACVF,GAAY,IA4DV,uBCjGNc,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3038acd0.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\ninterface Good {\n  name: string;\n  id: string;\n}\n\nconst goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n].map(good => ({\n  name: good,\n  id: uuidv4(),\n}));\n\nconst App: FC = () => {\n  const [isShowedGoods, setShowedGoods] = useState(false);\n  const [isReversed, setReversed] = useState(false);\n  const [isSortBy, setSortBy] = useState('');\n\n  const showTheGoods = () => setShowedGoods(true);\n\n  const reverseGoods = () => setReversed(revers => !revers);\n\n  const sortByAlphabet = () => setSortBy('alphabet');\n\n  const sortByLength = () => setSortBy('length');\n\n  const resetTheGoods = () => {\n    setSortBy('');\n    setReversed(false);\n  };\n\n  const copyGoods = [...goodsFromServer];\n\n  copyGoods.sort((good1, good2) => {\n    switch (isSortBy) {\n      case 'alphabet':\n        return good1.name.localeCompare(good2.name);\n      case 'length':\n        return good1.name.length - good2.name.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    copyGoods.reverse();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        React list of goods\n      </h1>\n      {isShowedGoods ? (\n        <ul className=\"goods\">\n          { copyGoods.map(good => (\n            <li className=\"goods_list\" key={good.id}>\n              {good.name}\n            </li>\n          ))}\n        </ul>\n      )\n        : (\n          <button\n            type=\"button\"\n            onClick={showTheGoods}\n          >\n            Start\n          </button>\n        )}\n      <button\n        type=\"button\"\n        onClick={reverseGoods}\n      >\n        Reverse\n      </button>\n      <button\n        type=\"button\"\n        onClick={sortByAlphabet}\n      >\n        Sort alphabetically\n      </button>\n      <button\n        type=\"button\"\n        onClick={sortByLength}\n      >\n        Sort by length\n      </button>\n      <button\n        type=\"button\"\n        onClick={resetTheGoods}\n      >\n        Reset\n      </button>\n    </div>\n\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}